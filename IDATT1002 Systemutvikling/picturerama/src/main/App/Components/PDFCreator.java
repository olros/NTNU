package Components;

import Database.HibernateClasses.Photo;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.List;

/**
 * Class that is used to create a photo album in the form of a pdf file
 */
public final class PDFCreator {

	private static Document document;
	private static List<Photo> photos;
	private static String albumName;
	private static Font smallFont = new Font(Font.FontFamily.TIMES_ROMAN, 20, Font.BOLD);
	private static Font headerFont = new Font(Font.FontFamily.TIMES_ROMAN, 22, Font.BOLD);
	private static Font imageFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);

	/**
	 * Private constructor to hinder creation of utility class
	 */
	private PDFCreator() {
		throw new IllegalStateException("Can not make instance of utility class");
	}

	/**
	 * Creates a new pdf document with all the photos, author name, and album name.
	 *
	 * @param AlbumPhotos  all the photos in the album that is getting made into a PDF.
	 * @param saveLocation is where the PDF is going to be saved.
	 * @param name         is the name of the album.
	 * @throws IOException
	 * @throws DocumentException
	 */
	public static void createPDF(List<Photo> AlbumPhotos, String saveLocation, String name) throws IOException, DocumentException {
		photos = AlbumPhotos;
		albumName = name;
		document = new Document();
		PdfWriter.getInstance(document, new FileOutputStream(saveLocation));
		document.open();

		addHeader();
		addImageContainers();

		document.close();
	}

	/**
	 * Adds the header to the PDF document.
	 *
	 * @throws DocumentException
	 */
	private static void addHeader() throws DocumentException {
		Paragraph headline = new Paragraph();
		addEmptyLineTo(headline, 1);

		headline.add(new Paragraph(albumName, headerFont));
		addEmptyLineTo(headline, 1);

		headline.add(new Paragraph("Generated by: " + UserInfo.getUser().getUsername() + ", " + new Date(), smallFont));
		addEmptyLineTo(headline, 2);

		document.add(headline);
	}

	/**
	 * Adds the images to the PDF document.
	 *
	 * @throws DocumentException
	 * @throws IOException
	 */
	private static void addImageContainers() throws DocumentException, IOException {
		Paragraph imagesContainer = new Paragraph();
		addEmptyLineTo(imagesContainer, 1);

		document.add(imagesContainer);
		addAllImages();
	}

	/**
	 * Adds all the images to the PDF document.
	 *
	 * @throws DocumentException
	 * @throws IOException
	 */
	private static void addAllImages() throws DocumentException, IOException {
		for (Photo photo : photos) {
			PdfPTable photoBox = createTable(photo);

			Paragraph emptyLines = new Paragraph();
			addEmptyLineTo(emptyLines, 4);

			document.add(photoBox);
			document.add(emptyLines);
		}
	}

	/**
	 * Creates a PdfTable
	 *
	 * @param photo the photo that is being added to the table
	 * @return the finished table
	 * @throws DocumentException
	 * @throws IOException
	 */
	private static PdfPTable createTable(Photo photo) throws DocumentException, IOException {
		Image image = Image.getInstance(photo.getUrl());
		scaleImage(image);
		PdfPTable photoBox = new PdfPTable(2);
		photoBox.setWidthPercentage(100);
		photoBox.setWidths(new int[]{1, 2});
		photoBox.addCell(createTextCell(photo.getTitle()));
		photoBox.addCell(new PdfPCell(image, true));

		return photoBox;
	}

	/**
	 * Creates a text cell that is positioned to the left of the table
	 *
	 * @param text the text in the cell
	 * @return the finished cell
	 */
	private static PdfPCell createTextCell(String text) {
		PdfPCell cell = new PdfPCell();
		Paragraph p = new Paragraph(text, imageFont);

		p.setAlignment(Element.ALIGN_LEFT);
		cell.addElement(p);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBorder(Rectangle.NO_BORDER);

		return cell;
	}

	/**
	 * Scales the images according to the ratio between the height and the width of the image.
	 *
	 * @param image the image that is getting scaled.
	 */
	private static void scaleImage(Image image) {
		if (image.getWidth() == image.getHeight()) {
			image.scaleToFit(400, 400);
		} else if (image.getWidth() > image.getHeight()) {
			image.scaleToFit(400, 800);
		} else {
			image.scaleToFit(800, 400);
		}
	}

	/**
	 * Add an empty line to the PDF document.
	 *
	 * @param paragraph the paragraph to insert an empty line into.
	 * @param number    the number of empty lines desired.
	 */
	private static void addEmptyLineTo(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
}
